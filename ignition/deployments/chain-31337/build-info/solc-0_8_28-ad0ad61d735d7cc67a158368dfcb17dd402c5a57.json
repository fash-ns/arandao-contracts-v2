{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-ad0ad61d735d7cc67a158368dfcb17dd402c5a57",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/bridge/Bridge.sol": "project/contracts/bridge/Bridge.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/extensions/IERC721Enumerable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/IERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/IERC721Receiver.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity >=0.5.0;\n\n/**\n * @title ERC-721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC-721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/utils/ERC721Holder.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721Receiver} from \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\n * {IERC721-setApprovalForAll}.\n */\nabstract contract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "project/contracts/bridge/Bridge.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport {IWrapper} from \"./IWrapper.sol\";\nimport {IStakeMeta} from \"./IStakeMeta.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {BridgeLib} from \"./BridgeLib.sol\";\nimport {ERC721Holder} from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\n\ncontract AranDAOBridge is Ownable, ERC721Holder {\n  address public oldUvmAddress;\n  address public oldDnmAddress;\n  // address public oldArusenseAddress;\n  // address public oldArusenseMarketAddress;\n  address public oldWrapperTokenAddress;\n  address public oldStakeAddress;\n  address public newDnmAddress;\n  uint256 public constructionTime;\n\n  uint256[] public arusenseTokenIds;\n  uint256[] public wrapperTokenIds;\n\n  mapping(address => uint256) public uvmBalanceByAddressSnapshot;\n  mapping(address => uint256) public dnmBalanceByAddressSnapshot;\n  // mapping(address => uint256[]) public arusenseTokenIdsByAddressSnapshot;\n  mapping(address => uint256[]) public wrapperTokenIdsByAddressSnapshot;\n  mapping(uint256 => BridgeLib.Stake) public stakeSnapshot;\n\n  modifier inDeadlineDuration() {\n    BridgeLib.validateDeadline(constructionTime);\n    _;\n  }\n\n  constructor(\n    address _oldUvmAddress,\n    address _oldDnmAddress,\n    // address _oldArusenseAddress,\n    // address _oldArusenseMarketAddress,\n    address _oldWrapperTokenAddress,\n    address _oldStakeAddress,\n    address _newDnmAddress\n  ) Ownable(msg.sender) {\n    oldUvmAddress = _oldUvmAddress;\n    oldDnmAddress = _oldDnmAddress;\n    // oldArusenseAddress = _oldArusenseAddress;\n    // oldArusenseMarketAddress = _oldArusenseMarketAddress;\n    oldWrapperTokenAddress = _oldWrapperTokenAddress;\n    oldStakeAddress = _oldStakeAddress;\n    newDnmAddress = _newDnmAddress;\n    constructionTime = block.timestamp;\n  }\n\n  function snapshotDnm(\n    address[] memory addresses,\n    uint256[] memory amounts\n  ) public onlyOwner {\n    BridgeLib.validateArrayLengths(\n      addresses.length,\n      amounts.length,\n      \"Address and amount length mismatch.\"\n    );\n    for (uint256 i = 0; i < addresses.length; i++) {\n      dnmBalanceByAddressSnapshot[addresses[i]] = amounts[i];\n    }\n    emit BridgeLib.GotDnmSnapshot();\n  }\n\n  function snapshotUvm(\n    address[] memory addresses,\n    uint256[] memory amounts\n  ) public onlyOwner {\n    BridgeLib.validateArrayLengths(\n      addresses.length,\n      amounts.length,\n      \"Address and amount length mismatch.\"\n    );\n    for (uint256 i = 0; i < addresses.length; i++) {\n      uvmBalanceByAddressSnapshot[addresses[i]] = amounts[i];\n    }\n    emit BridgeLib.GotUvmSnapshot();\n  }\n\n  function snapshotWrapperToken(\n    address[] memory addresses,\n    uint256[][] memory tokenIds\n  ) public onlyOwner {\n    BridgeLib.validateArrayLengths(\n      addresses.length,\n      tokenIds.length,\n      \"Address and tokenId length mismatch.\"\n    );\n    for (uint256 i = 0; i < addresses.length; i++) {\n      wrapperTokenIdsByAddressSnapshot[addresses[i]] = tokenIds[i];\n    }\n    emit BridgeLib.GotWrapperSnapshot();\n  }\n\n  // function snapshotArusanseToken(\n  //   address[] memory addresses,\n  //   uint256[][] memory tokenIds\n  // ) public onlyOwner {\n  //   BridgeLib.validateArrayLengths(\n  //     addresses.length,\n  //     tokenIds.length,\n  //     \"Address and tokenId length mismatch.\"\n  //   );\n  //   for (uint256 i = 0; i < addresses.length; i++) {\n  //     arusenseTokenIdsByAddressSnapshot[addresses[i]] = tokenIds[i];\n  //   }\n  //   emit BridgeLib.GotWrapperSnapshot();\n  // }\n\n  function snapshotStake(\n    uint256[] memory stakeIds,\n    BridgeLib.Stake[] memory stakes\n  ) public onlyOwner {\n    BridgeLib.validateArrayLengths(\n      stakeIds.length,\n      stakes.length,\n      \"Address and tokenId length mismatch.\"\n    );\n    for (uint256 i = 0; i < stakeIds.length; i++) {\n      stakeSnapshot[stakeIds[i]] = stakes[i];\n    }\n    emit BridgeLib.GotStakeSnapshot();\n  }\n\n  function withdrawDnm(uint256 amount) public onlyOwner {\n    uint256 dnmBalance = BridgeLib.getERC20Balance(\n      oldDnmAddress,\n      address(this)\n    );\n    require(\n      amount <= dnmBalance,\n      \"Amount is greater than the contract's DNM balance.\"\n    );\n    BridgeLib.transferERC20From(\n      oldDnmAddress,\n      address(this),\n      msg.sender,\n      amount,\n      \"DNM transfer from contract to user wasn't successful.\"\n    );\n    dnmBalance -= amount;\n    emit BridgeLib.DnmWithdrawnByOwner(amount);\n  }\n\n  function withdrawRemainingNewDnm() public onlyOwner {\n    uint256 contractBalance = BridgeLib.getERC20Balance(\n      newDnmAddress,\n      address(this)\n    );\n    BridgeLib.transferERC20From(\n      newDnmAddress,\n      address(this),\n      msg.sender,\n      contractBalance,\n      \"DNM transfer from contract to user wasn't successful.\"\n    );\n    emit BridgeLib.RemainingNewDnmWithdrawnByOwner(contractBalance);\n  }\n\n  function withdrawUvm(uint256 amount) public onlyOwner {\n    uint256 uvmBalance = BridgeLib.getERC20Balance(\n      oldUvmAddress,\n      address(this)\n    );\n    require(\n      amount <= uvmBalance,\n      \"Amount is greater than the contract's UVM balance.\"\n    );\n    BridgeLib.transferERC20From(\n      oldUvmAddress,\n      address(this),\n      msg.sender,\n      amount,\n      \"UVM transfer from contract to user wasn't successful.\"\n    );\n    uvmBalance -= amount;\n    emit BridgeLib.UvmWithdrawnByOwner(amount);\n  }\n\n  // function withdrawArusenseToken(uint256 tokenId) public onlyOwner {\n  //   IERC721 arusenseContract = IERC721(oldArusenseAddress);\n  //   arusenseContract.transferFrom(address(this), msg.sender, tokenId);\n  //   emit BridgeLib.ArusenseTokenWithdrawnByOwner(tokenId);\n  // }\n\n  function withdrawWrapperToken(uint256 tokenId) public onlyOwner {\n    IWrapper wrapperTokenContract = IWrapper(oldWrapperTokenAddress);\n    wrapperTokenContract.transferFrom(address(this), msg.sender, tokenId);\n    emit BridgeLib.WrapperTokenWithdrawnByOwner(tokenId);\n  }\n\n  function bridgeUvm() public inDeadlineDuration {\n    uint256 userBalance = BridgeLib.getERC20Balance(oldUvmAddress, msg.sender);\n    uint256 bridgedBalance = BridgeLib.validateBridgeAmount(\n      uvmBalanceByAddressSnapshot[msg.sender],\n      userBalance\n    );\n\n    BridgeLib.transferERC20From(\n      oldUvmAddress,\n      msg.sender,\n      address(this),\n      bridgedBalance,\n      \"UVM transfer from user to contract wasn't successful.\"\n    );\n    uvmBalanceByAddressSnapshot[msg.sender] -= bridgedBalance;\n\n    uint256 dnmAmount = BridgeLib.calculateDnmFromUvm(bridgedBalance);\n    BridgeLib.transferERC20From(\n      newDnmAddress,\n      address(this),\n      msg.sender,\n      dnmAmount,\n      \"DNM transfer from contract to user wasn't successful.\"\n    );\n    emit BridgeLib.UvmBridgedByUser(msg.sender, bridgedBalance, dnmAmount);\n  }\n\n  function bridgeDnm() public inDeadlineDuration {\n    uint256 userBalance = BridgeLib.getERC20Balance(oldDnmAddress, msg.sender);\n    uint256 bridgedBalance = BridgeLib.validateBridgeAmount(\n      dnmBalanceByAddressSnapshot[msg.sender],\n      userBalance\n    );\n\n    BridgeLib.transferERC20From(\n      oldDnmAddress,\n      msg.sender,\n      address(this),\n      bridgedBalance,\n      \"DNM transfer from user to contract wasn't successful.\"\n    );\n    dnmBalanceByAddressSnapshot[msg.sender] -= bridgedBalance;\n\n    uint256 dnmAmount = BridgeLib.calculateNewDnmFromOldDnm(bridgedBalance);\n    BridgeLib.transferERC20From(\n      newDnmAddress,\n      address(this),\n      msg.sender,\n      dnmAmount,\n      \"DNM transfer from contract to user wasn't successful.\"\n    );\n    emit BridgeLib.DnmBridgedByUser(msg.sender, bridgedBalance, bridgedBalance);\n  }\n\n  // function bridgeArusenseNFT(uint256 tokenId) public inDeadlineDuration {\n  //   uint256[] memory tokenIds = arusenseTokenIdsByAddressSnapshot[msg.sender];\n  //   require(\n  //     BridgeLib.validateTokenExistsInArray(tokenId, tokenIds),\n  //     \"Token doesn't exist in the snapshot.\"\n  //   );\n\n  //   BridgeLib.validateTokenOwnership(oldArusenseAddress, tokenId, msg.sender);\n\n  //   INFTLandMarket arusenseMarketContract = INFTLandMarket(\n  //     oldArusenseMarketAddress\n  //   );\n  //   (uint256 bv, uint256 sv) = arusenseMarketContract.getMintPrice(tokenId);\n  //   IERC721(oldArusenseAddress).safeTransferFrom(\n  //     msg.sender,\n  //     address(this),\n  //     tokenId\n  //   );\n\n  //   uint256 dnmAmount = BridgeLib.calculateDnmFromPrices(bv, sv);\n  //   BridgeLib.transferERC20From(\n  //     newDnmAddress,\n  //     address(this),\n  //     msg.sender,\n  //     dnmAmount,\n  //     \"DNM transfer from contract to user wasn't successful.\"\n  //   );\n\n  //   arusenseTokenIds.push(tokenId);\n  //   emit BridgeLib.ArusenseTokenBridgedByUser(msg.sender, tokenId, dnmAmount);\n  // }\n\n  function bridgeWrapperToken(uint256 tokenId) public inDeadlineDuration {\n    IWrapper wrapperTokenContract = IWrapper(oldWrapperTokenAddress);\n    uint256[] memory tokenIds = wrapperTokenIdsByAddressSnapshot[msg.sender];\n    require(\n      BridgeLib.validateTokenExistsInArray(tokenId, tokenIds),\n      \"Token doesn't exist in the snapshot.\"\n    );\n\n    BridgeLib.validateTokenOwnership(\n      oldWrapperTokenAddress,\n      tokenId,\n      msg.sender\n    );\n\n    uint256 uvmAmount = BridgeLib.getUvmAmountByWrapperTokenType(\n      wrapperTokenContract.getWrapTokenPlan(tokenId)\n    );\n    uint256 dnmAmount = BridgeLib.calculateDnmFromUvm(uvmAmount);\n    wrapperTokenContract.safeTransferFrom(msg.sender, address(this), tokenId);\n\n    BridgeLib.transferERC20From(\n      newDnmAddress,\n      address(this),\n      msg.sender,\n      dnmAmount,\n      \"DNM transfer from contract to user wasn't successful.\"\n    );\n\n    wrapperTokenIds.push(tokenId);\n    emit BridgeLib.WrapperTokenBridgedByUser(msg.sender, tokenId, dnmAmount);\n  }\n\n  function bridgeStakePrinciple(uint256 stakeId) public {\n    BridgeLib.Stake memory stake = stakeSnapshot[stakeId];\n    BridgeLib.validateStakeExists(stake);\n    BridgeLib.validateStakePrincipleNotWithdrawn(stake);\n\n    IStakeMeta stakeContract = IStakeMeta(oldStakeAddress);\n    IStakeMeta.StakePlan memory stakePlan = stakeContract.getStake(stakeId);\n\n    BridgeLib.validateStakeClosed(stakePlan.finish);\n\n    uint256 eligibleTimestamp = BridgeLib.calculateEligibilityTimestamp(\n      stakePlan.start,\n      stakePlan.stake_duration,\n      constructionTime,\n      30\n    );\n    require(\n      block.timestamp >= eligibleTimestamp,\n      \"The time for principle withdrawal of this stake has been passed.\"\n    );\n\n    BridgeLib.transferERC20From(\n      oldUvmAddress,\n      stake.userAddress,\n      address(this),\n      stakePlan.uvm,\n      \"UVM transfer from user to contract wasn't successful.\"\n    );\n    uint256 totalDnmAmount = BridgeLib.calculateDnmFromUvm(stakePlan.uvm);\n\n    BridgeLib.transferERC20From(\n      oldDnmAddress,\n      stake.userAddress,\n      address(this),\n      stakePlan.dnm,\n      \"Previous DNM transfer from user to contract wasn't successful.\"\n    );\n    totalDnmAmount += BridgeLib.calculateNewDnmFromOldDnm(stakePlan.dnm);\n\n    IWrapper wrapperTokenContract = IWrapper(oldWrapperTokenAddress);\n    uint256 uvmAmount = BridgeLib.getUvmAmountByWrapperTokenType(\n      wrapperTokenContract.getWrapTokenPlan(stakePlan.land)\n    );\n    totalDnmAmount += BridgeLib.calculateDnmFromUvm(uvmAmount);\n    wrapperTokenContract.safeTransferFrom(\n      msg.sender,\n      address(this),\n      stakePlan.land\n    );\n\n    wrapperTokenIds.push(stakePlan.land);\n\n    BridgeLib.transferERC20From(\n      newDnmAddress,\n      address(this),\n      msg.sender,\n      totalDnmAmount,\n      \"New DNM transfer from contract to user wasn't successful.\"\n    );\n\n    stakeSnapshot[stakeId].principleWithdrawn = true;\n    emit BridgeLib.StakePrincipleBridgedByUser(\n      msg.sender,\n      stakeId,\n      stakePlan.uvm,\n      stakePlan.dnm,\n      stakePlan.land,\n      totalDnmAmount\n    );\n  }\n\n  function bridgeStakeYield(uint256 stakeId, uint256 uvmAmount) public {\n    BridgeLib.Stake memory stake = stakeSnapshot[stakeId];\n    BridgeLib.validateStakeExists(stake);\n    BridgeLib.validateStakePrincipleNotWithdrawn(stake);\n\n    IStakeMeta stakeContract = IStakeMeta(oldStakeAddress);\n    IStakeMeta.StakePlan memory stakePlan = stakeContract.getStake(stakeId);\n\n    BridgeLib.validateStakeClosed(stakePlan.finish);\n\n    uint256 eligibleTimestamp = BridgeLib.calculateEligibilityTimestamp(\n      stakePlan.finish,\n      300 days,\n      constructionTime + 30 days,\n      30\n    );\n\n    require(\n      block.timestamp >= eligibleTimestamp,\n      \"The time for yield withdrawal of this stake has been passed.\"\n    );\n\n    uint256 totalReward = stakeContract.calculateReward(\n      stakePlan.plan,\n      stakePlan.dnm,\n      stakePlan.start,\n      stakePlan.finish,\n      stakePlan.stake_duration\n    );\n\n    BridgeLib.validateYieldAmount(uvmAmount, totalReward, stake.totalPaidOut);\n\n    BridgeLib.transferERC20From(\n      oldUvmAddress,\n      stake.userAddress,\n      address(this),\n      uvmAmount,\n      \"UVM transfer from user to contract wasn't successful.\"\n    );\n\n    stake.totalPaidOut += uvmAmount;\n\n    uint256 dnmAmount = BridgeLib.calculateDnmFromUvm(uvmAmount);\n    BridgeLib.transferERC20From(\n      newDnmAddress,\n      address(this),\n      msg.sender,\n      dnmAmount,\n      \"New DNM transfer from contract to user wasn't successful.\"\n    );\n\n    emit BridgeLib.StakeYieldBridgedByUser(\n      msg.sender,\n      stakeId,\n      uvmAmount,\n      dnmAmount\n    );\n  }\n}\n"
      },
      "project/contracts/bridge/BridgeLib.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nlibrary BridgeLib {\n  struct Stake {\n    address userAddress;\n    bool exists;\n    uint256 totalPaidOut;\n    bool principleWithdrawn;\n  }\n\n  event GotDnmSnapshot();\n  event GotUvmSnapshot();\n  event GotArusenseSnapshot();\n  event GotWrapperSnapshot();\n  event GotStakeSnapshot();\n  event DnmWithdrawnByOwner(uint256 amount);\n  event RemainingNewDnmWithdrawnByOwner(uint256 amount);\n  event UvmWithdrawnByOwner(uint256 amount);\n  event ArusenseTokenWithdrawnByOwner(uint256 tokenId);\n  event WrapperTokenWithdrawnByOwner(uint256 tokenId);\n  event UvmBridgedByUser(\n    address userAddress,\n    uint256 amount,\n    uint256 totalBridgedDnm\n  );\n  event DnmBridgedByUser(\n    address userAddress,\n    uint256 amount,\n    uint256 totalBridgedDnm\n  );\n  event ArusenseTokenBridgedByUser(\n    address userAddress,\n    uint256 tokenId,\n    uint256 totalBridgedDnm\n  );\n  event WrapperTokenBridgedByUser(\n    address userAddress,\n    uint256 tokenId,\n    uint256 totalBridgedDnm\n  );\n  event StakePrincipleBridgedByUser(\n    address userAddress,\n    uint256 stakeId,\n    uint256 uvmAmount,\n    uint256 dnmAmount,\n    uint256 wrapperTokenId,\n    uint256 totalBridgedDnm\n  );\n  event StakeYieldBridgedByUser(\n    address userAddress,\n    uint256 stakeId,\n    uint256 uvmAmount,\n    uint256 totalBridgedDnm\n  );\n\n  // Math utility functions\n  function getMax(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function getMin(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? b : a;\n  }\n\n  // Validation functions\n  function validateArrayLengths(\n    uint256 len1,\n    uint256 len2,\n    string memory errorMessage\n  ) internal pure {\n    require(len1 == len2, errorMessage);\n  }\n\n  function validateTokenExistsInArray(\n    uint256 tokenId,\n    uint256[] memory tokenIds\n  ) internal pure returns (bool) {\n    uint256 tokenIdsLen = tokenIds.length;\n    for (uint256 i = 0; i < tokenIdsLen; i++) {\n      if (tokenIds[i] == tokenId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function validateTokenOwnership(\n    address tokenContract,\n    uint256 tokenId,\n    address expectedOwner\n  ) internal view {\n    address tokenOwner = IERC721(tokenContract).ownerOf(tokenId);\n    require(\n      tokenOwner == expectedOwner,\n      \"User is not the owner of the provided token.\"\n    );\n  }\n\n  function validateDeadline(uint256 constructionTime) internal view {\n    require(\n      block.timestamp < constructionTime + (30 days),\n      \"The time to bridge has been past.\"\n    );\n  }\n\n  // Calculation functions\n  function calculateDnmFromPrices(\n    uint256 bv,\n    uint256 sv\n  ) internal pure returns (uint256) {\n    return (bv + (sv * 1e12)) / 1000;\n  }\n\n  function calculateDnmFromUvm(\n    uint256 uvmAmount\n  ) internal pure returns (uint256) {\n    return uvmAmount / 10000;\n  }\n\n  function calculateNewDnmFromOldDnm(\n    uint256 uvmAmount\n  ) internal pure returns (uint256) {\n    return uvmAmount / 10;\n  }\n\n  function calculateEligibilityTimestamp(\n    uint256 baseTimestamp,\n    uint256 duration,\n    uint256 constructionTime,\n    uint256 additionalDays\n  ) internal pure returns (uint256) {\n    return\n      getMax(baseTimestamp + duration, constructionTime) +\n      (additionalDays * 1 days);\n  }\n\n  // Token transfer functions\n  function transferERC20From(\n    address tokenContract,\n    address from,\n    address to,\n    uint256 amount,\n    string memory errorMessage\n  ) internal {\n    bool success = IERC20(tokenContract).transferFrom(from, to, amount);\n    require(success, errorMessage);\n  }\n\n  function transferERC20(\n    address tokenContract,\n    address to,\n    uint256 amount,\n    string memory errorMessage\n  ) internal {\n    bool success = IERC20(tokenContract).transfer(to, amount);\n    require(success, errorMessage);\n  }\n\n  function getERC20Balance(\n    address tokenContract,\n    address account\n  ) internal view returns (uint256) {\n    return IERC20(tokenContract).balanceOf(account);\n  }\n\n  // Bridge validation functions\n  function validateBridgeAmount(\n    uint256 snapshotAmount,\n    uint256 userBalance\n  ) internal pure returns (uint256) {\n    uint256 bridgedBalance = getMin(snapshotAmount, userBalance);\n    require(bridgedBalance > 0, \"User doesn't have any bridgable tokens.\");\n    return bridgedBalance;\n  }\n\n  function validateStakeExists(Stake memory stake) internal pure {\n    require(stake.exists, \"This stake doesn't exist in snapshot.\");\n  }\n\n  function validateStakePrincipleNotWithdrawn(\n    Stake memory stake\n  ) internal pure {\n    require(\n      !stake.principleWithdrawn,\n      \"This stake's principle has already been withdrawn.\"\n    );\n  }\n\n  function validateStakeClosed(uint256 finishTime) internal pure {\n    require(finishTime != 0, \"This stake is not closed yet.\");\n  }\n\n  function validateYieldAmount(\n    uint256 requestedAmount,\n    uint256 totalReward,\n    uint256 totalPaidOut\n  ) internal pure {\n    require(\n      requestedAmount <= totalReward - totalPaidOut,\n      \"Entered UVM amount is greater than the total remaining reward of the stake.\"\n    );\n  }\n\n  function getUvmAmountByWrapperTokenType(\n    uint8 _type\n  ) internal pure returns (uint256) {\n    if (_type == 1) {\n      return 680 ether;\n    } else if (_type == 2) {\n      return 340 ether;\n    } else if (_type == 3) {\n      return 170 ether;\n    } else if (_type == 4) {\n      return 68 ether;\n    } else if (_type == 5) {\n      return 34 ether;\n    } else {\n      revert(\"Type should be in range 1 - 5\");\n    }\n  }\n}\n"
      },
      "project/contracts/bridge/IStakeMeta.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\ninterface IStakeMeta {\n  struct StakePlan {\n    uint256 userId;\n    bool exists;\n    uint8 plan;\n    uint256 uvm;\n    uint256 dnm;\n    uint256 land;\n    uint256 start;\n    uint256 finish;\n    uint256 stake_duration;\n    uint256 total_paid_out;\n  }\n\n  struct User {\n    uint256 id;\n    bool exists;\n    uint256[] stakePlanIds;\n    uint256 totalReward;\n  }\n\n  function userList(uint256) external view returns (address);\n  function stakeFrom(\n    address staker,\n    uint256 dnmAmount,\n    uint256 wrapper_id,\n    uint256 stake_duration\n  ) external;\n  function stake(\n    uint256 dnmAmount,\n    uint256 land_id,\n    uint256 stake_duration\n  ) external;\n  function withdrawStake(uint256 stake_id, bool withdraw_reward) external;\n  function setFeePercent(uint256 _fee_percent) external;\n  function withdrawReward(uint256 stake_id) external returns (bool);\n  function withdrawFeeByDao(uint256 amount, address to) external;\n  function getUserStakeIds(\n    address user_address\n  ) external view returns (uint256[] memory);\n  function getUserStake(\n    address user_address\n  ) external view returns (StakePlan[] memory);\n  function getAllStake() external view returns (StakePlan[] memory);\n  function getActiveStake() external view returns (StakePlan[] memory);\n  function getFinishedStake() external view returns (StakePlan[] memory);\n  function getStake(uint256 id) external view returns (StakePlan memory sp);\n  function getPlanByTokenId(uint256 land_id) external view returns (uint8);\n  function getContractUVMBalance() external view returns (uint256);\n  function getContractDNMBalance() external view returns (uint256);\n  function getUser(\n    address user_address\n  ) external view returns (uint256, bool, uint256);\n  function calDnmUvmRatio(uint256 dnm) external pure returns (uint256);\n  function allowedDnmAmountStake(uint8 plan) external view returns (uint256);\n  function calculateRewardForStake(\n    uint256 stake_id\n  ) external view returns (uint256);\n  function withdrawAllowance(\n    StakePlan memory sp\n  ) external view returns (uint256);\n  function calculateReward(\n    uint16 plan_type,\n    uint256 dnm_amount,\n    uint256 start,\n    uint256 end,\n    uint256 stake_duration\n  ) external view returns (uint256);\n  function addTokenToPool(uint256 amount) external;\n  function setDao(address _dao) external;\n}\n"
      },
      "project/contracts/bridge/IWrapper.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport {IERC721Enumerable} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\ninterface IWrapper is IERC721Enumerable {\n  struct Collection {\n    uint256 type_count;\n    bool mint_status;\n    bool withdraw_status;\n    bool exists;\n  }\n\n  struct PlanType {\n    uint256 start;\n    uint256 end;\n    uint8 plan;\n  }\n\n  struct WrapToken {\n    address collection_address;\n    uint256 token_id;\n    uint8 plan_type;\n    bool burned;\n  }\n\n  function wrapTokenList(uint256) external view returns (WrapToken memory);\n  function changeDao(address _dao) external;\n  function addOrUpdateCollection(\n    address _collection,\n    Collection memory collectData,\n    PlanType[] memory planTypes\n  ) external;\n  function changeCollectionStatus(\n    address _collection,\n    bool mint_status,\n    bool withdraw_status\n  ) external;\n  function getUserTokens(address user) external view returns (uint256[] memory);\n  function getUserTokensInfo() external view returns (WrapToken[] memory);\n  function getUserTokensInfo(\n    address user\n  ) external view returns (WrapToken[] memory);\n  function getTokenPlan(\n    address _collection,\n    uint256 id\n  ) external view returns (uint8);\n  function getWrapTokenPlan(uint256 id) external view returns (uint8);\n  function mint(\n    address _collection,\n    address to,\n    uint256 id\n  ) external returns (uint256);\n  function withdraw(address _collection, uint256 wrapTokenId) external;\n}\n"
      }
    }
  }
}