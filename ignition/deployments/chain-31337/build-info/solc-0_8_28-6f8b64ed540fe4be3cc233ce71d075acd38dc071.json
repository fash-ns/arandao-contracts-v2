{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-6f8b64ed540fe4be3cc233ce71d075acd38dc071",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/vault/Vault.sol": "project/contracts/vault/Vault.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@uniswap/v2-periphery/=npm/@uniswap/v2-periphery@1.1.0-beta.0/",
        "project/:@uniswap/v2-periphery/=npm/@uniswap/v2-periphery@1.1.0-beta.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/extensions/ERC20Burnable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "npm/@uniswap/v2-periphery@1.1.0-beta.0/contracts/interfaces/IUniswapV2Router01.sol": {
        "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
      },
      "npm/@uniswap/v2-periphery@1.1.0-beta.0/contracts/interfaces/IUniswapV2Router02.sol": {
        "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
      },
      "project/contracts/vault/interfaces/IPriceFeed.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IPriceFeed {\n  function getPaxgInDai() external view returns (uint256 price);\n  function getWbtcInDai() external view returns (uint256 price);\n}\n"
      },
      "project/contracts/vault/Vault.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {VaultStorage} from \"./VaultCore/VaultStorage.sol\";\nimport {VaultHelper} from \"./VaultCore/VaultHelper.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/utils/Pausable.sol\";\n\n/**\n * @title MultiAssetVault\n * @notice The main vault contract responsible for deposits, withdrawals, and asset pricing.\n * It manages DAI, PAXG, and WBTC reserves.\n */\ncontract MultiAssetVault is\n  Pausable,\n  ReentrancyGuard,\n  VaultStorage,\n  VaultHelper\n{\n  /**\n   * @notice Initializes the Vault by setting all token addresses, external interfaces,\n   * core contract, and initial administrators.\n   */\n  constructor(\n    address _dai,\n    address _paxg,\n    address _wbtc,\n    address _dnm,\n    address _feedAddr,\n    address _routerAddr,\n    address _admin1,\n    address _admin2,\n    address _admin3,\n    address _feeReceiver\n  )\n    VaultStorage(\n      _dai,\n      _paxg,\n      _wbtc,\n      _dnm,\n      _feedAddr,\n      _routerAddr,\n      _admin1,\n      _admin2,\n      _admin3,\n      _feeReceiver\n    )\n  {}\n\n  /**\n   * @notice Allows users to deposit DAI into the vault\n   * The DAI is then partially swapped into reserve assets (PAXG, WBTC).\n   * @param amountToDeposit The amount of DAI to deposit.\n   */\n  function deposit(\n    uint256 amountToDeposit\n  ) external nonReentrant whenNotPaused {\n    require(amountToDeposit > 0, \"Deposit amount must be > 0\");\n\n    // 1. Transfer DAI from user to vault\n    _handleTranferFrom(msg.sender, address(this), amountToDeposit, DAI);\n\n    // 2. Swap deposited DAI into PAXG and WBTC based on allocation\n    _handleDepositedDai(amountToDeposit);\n  }\n\n  /**\n   * @notice Allows users to redeem dnm and get dai\n   */\n  function redeem(uint256 amount) external nonReentrant whenNotPaused {\n    _handleRedeem(msg.sender, amount);\n  }\n\n  /**\n   * @notice Calculates the current price of one DNM token in DAI equivalent.\n   * @return dnmPrice The price of 1 DNM token, denominated in DAI (1e18 precision).\n   */\n  function getPrice() public view returns (uint256) {\n    return _getDnmPrice();\n  }\n\n  /**\n   * @notice Allows an authorized admin to withdraw all reserve assets from the vault.\n   * This function is restricted by a 90-day grace period from deployment.\n   */\n  function emergencyWithdraw() external onlyAdmin {\n    // Corrected check: using the withdrawalEnabledTimestamp from VaultStorage\n    require(\n      block.timestamp >= withdrawalEnabledTimestamp,\n      \"Emergency withdrawal restricted during grace period\"\n    );\n    _withdrawAll(msg.sender);\n  }\n\n  /**\n   * @notice Allows the designated core contract to withdraw a specified amount of DAI.\n   * @param amount The amount of DAI to withdraw.\n   */\n  function withrawDai(uint256 amount) external onlyCore whenNotPaused {\n    require(amount > 0, \"Withdrawal amount must be > 0\");\n    _handleInsufficientDai(amount);\n    _handleTranfer(msg.sender, amount, DAI);\n  }\n\n  /**\n   * @notice Pauses all vault operations that are pausable (deposit, redeem, withdrawDai)\n   * Can only be called by an admin.\n   */\n  function pause() external onlyAdmin {\n    _pause();\n  }\n\n  /**\n   * @notice Unpauses the vault operations\n   * Can only be called by an admin.\n   */\n  function unpause() external onlyAdmin {\n    _unpause();\n  }\n}\n"
      },
      "project/contracts/vault/VaultCore/SwapHelper.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IUniswapV2Router02} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {VaultStorage} from \"./VaultStorage.sol\";\n\n/**\n * @title SwapHelper\n * @notice Provides secure, internal helper functions for swapping tokens via the Uniswap V2 Router,\n * managing allowances safely using OpenZeppelin's SafeERC20/forceApprove method.\n * @custom:dev-notes This contract is abstract and requires an inheriting contract to implement\n * the constructor and set the configured state variables.\n */\nabstract contract SwapHelper is VaultStorage {\n  using SafeERC20 for IERC20;\n\n  /**\n   * @notice Executes a swap from the base token (DAI) to a target token (tokenOut).\n   * @param tokenOut The address of the token to receive.\n   * @param amountIn The exact amount of DAI to sell.\n   * @param to The address that will receive the resulting tokenOut.\n   */\n  function _swapFromDAI(\n    address tokenOut,\n    uint256 amountIn,\n    address to\n  ) internal {\n    // Calculate deadline\n    uint256 deadline = block.timestamp + _deadlineDuration;\n\n    // Approve the router using forceApprove for secure allowance set\n    IERC20(DAI).forceApprove(address(_uniswapRouter), amountIn);\n\n    address[] memory path = new address[](2);\n    path[0] = DAI;\n    path[1] = tokenOut;\n\n    // Get expected amount out from Uniswap to calculate slippage limit\n    uint256[] memory amountsOut = _uniswapRouter.getAmountsOut(amountIn, path);\n    uint256 expectedOut = amountsOut[amountsOut.length - 1];\n\n    // Calculate minOut based on configured slippage\n    uint256 minOut = (expectedOut * (_slippageDenominator - _slippageBps)) /\n      _slippageDenominator;\n\n    _uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n      amountIn,\n      minOut, // Using the calculated minOut\n      path,\n      to,\n      deadline\n    );\n\n    // Reset allowance securely\n    IERC20(DAI).forceApprove(address(_uniswapRouter), 0);\n  }\n\n  /**\n   * @notice Executes a swap from a source token (tokenIn) to the base token (DAI), ensuring an exact amount of DAI is received.\n   * @dev Uses Uniswap V2 Router's swapTokensForExactTokensSupportingFeeOnTransferTokens.\n   * @param tokenIn The address of the token to sell.\n   * @param amountOut The exact amount of DAI to receive.\n   * @param amountInMax The maximum amount of tokenIn to spend.\n   * @param to The address that will receive the resulting DAI tokens.\n   */\n  function _swapForExactDAI(\n    address tokenIn,\n    uint256 amountOut,\n    uint256 amountInMax,\n    address to\n  ) internal {\n    require(tokenIn != DAI, \"Token is already DAI\");\n    require(amountOut > 0, \"Amount out must be greater than zero\");\n\n    uint256 deadline = block.timestamp + _deadlineDuration;\n\n    // Approve the router using forceApprove for secure allowance set (using amountInMax)\n    IERC20(tokenIn).forceApprove(address(_uniswapRouter), amountInMax);\n\n    // Build path: tokenIn -> DAI\n    address[] memory path = new address[](2);\n    path[0] = tokenIn;\n    path[1] = DAI;\n\n    // Perform swap\n    // Note: swapTokensForExactTokens requires amountOut as the first argument\n    _uniswapRouter.swapTokensForExactTokens(\n      amountOut,\n      amountInMax,\n      path,\n      to,\n      deadline\n    );\n\n    // Reset allowance securely\n    IERC20(tokenIn).forceApprove(address(_uniswapRouter), 0);\n  }\n\n  /**\n   * @notice Executes a swap from a source token (tokenIn) to the base token (DAI).\n   * @param tokenIn The address of the token to sell.\n   * @param amountIn The exact amount of tokenIn to sell.\n   * @param to The address that will receive the resulting DAI tokens.\n   */\n  function _swapToDAI(address tokenIn, uint256 amountIn, address to) internal {\n    require(tokenIn != DAI, \"Token is already DAI\");\n    require(amountIn > 0, \"Amount must be greater than zero\");\n\n    uint256 deadline = block.timestamp + _deadlineDuration;\n\n    // Approve the router using forceApprove for secure allowance set\n    IERC20(tokenIn).forceApprove(address(_uniswapRouter), amountIn);\n\n    // Build path: tokenIn -> DAI\n    address[] memory path = new address[](2);\n    path[0] = tokenIn;\n    path[1] = DAI;\n\n    // Get expected amount out from Uniswap to calculate slippage limit\n    uint256[] memory amountsOut = _uniswapRouter.getAmountsOut(amountIn, path);\n    uint256 expectedOut = amountsOut[amountsOut.length - 1];\n\n    // Calculate minOut based on configured slippage\n    uint256 minOut = (expectedOut * (_slippageDenominator - _slippageBps)) /\n      _slippageDenominator;\n\n    // Perform swap\n    _uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n      amountIn,\n      minOut,\n      path,\n      to,\n      deadline\n    );\n\n    // Reset allowance securely\n    IERC20(tokenIn).forceApprove(address(_uniswapRouter), 0);\n  }\n}\n"
      },
      "project/contracts/vault/VaultCore/VaultHelper.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ERC20Burnable} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {VaultStorage} from \"./VaultStorage.sol\";\nimport {SwapHelper} from \"./SwapHelper.sol\";\n\n/**\n * @title VaultHelper\n * @notice Provides core internal logic, access control, and asset management functions\n */\nabstract contract VaultHelper is VaultStorage, SwapHelper {\n  using SafeERC20 for IERC20;\n\n  /// @notice Ensures that only the designated core contract can call the function.\n  modifier onlyCore() {\n    _checkIsCoreContract(msg.sender);\n    _;\n  }\n\n  /// @notice Ensures that only a contract admin can call the function.\n  modifier onlyAdmin() {\n    _checkIsAdmin(msg.sender);\n    _;\n  }\n\n  function setCoreAddress(address coreAddress) public onlyAdmin {\n    coreContract = coreAddress;\n  }\n\n  /**\n   * @notice Handles transferring tokens from a specific address using SafeERC20.safeTransferFrom.\n   * @param from The address tokens are transferred from (must have prior approval).\n   * @param to The address receiving the tokens.\n   * @param amount The amount of tokens to transfer.\n   * @param token The address of the token being transferred.\n   */\n  function _handleTranferFrom(\n    address from,\n    address to,\n    uint256 amount,\n    address token\n  ) internal {\n    IERC20(token).safeTransferFrom(from, to, amount);\n  }\n\n  /**\n   * @notice Handles transferring tokens from the vault contract balance using SafeERC20.safeTransfer.\n   * @param to The address receiving the tokens.\n   * @param amount The amount of tokens to transfer.\n   * @param token The address of the token being transferred.\n   */\n  function _handleTranfer(address to, uint256 amount, address token) internal {\n    IERC20(token).safeTransfer(to, amount);\n  }\n\n  /**\n   * @notice Calculates the total value of all reserve assets (DAI, PAXG, WBTC) held by the vault in DAI equivalent.\n   * @dev Assumes price feeds return price in 1e18 format.\n   * @return value The total reserve value denominated in DAI (1e18 precision).\n   */\n  function _getTotalReserveBalanceInDai()\n    internal\n    view\n    returns (uint256 value)\n  {\n    // Balances\n    uint256 daiBalance = IERC20(DAI).balanceOf(address(this));\n    uint256 paxgBalance = IERC20(PAXG).balanceOf(address(this));\n    uint256 wbtcBalance = IERC20(WBTC).balanceOf(address(this));\n\n    // Prices\n    uint256 paxgPrice = _priceFeed.getPaxgInDai();\n    uint256 wbtcPrice = _priceFeed.getWbtcInDai();\n\n    // Accumulate value\n    value = daiBalance; // Start with native DAI balance\n    value += (paxgBalance * paxgPrice) / 1e18; // ADD PAXG value\n    value += (wbtcBalance * wbtcPrice) / 1e18; // ADD WBTC value\n  }\n\n  /**\n   * @notice Retrieves the total supply of the DNM token.\n   * @return The total supply of DNM.\n   */\n  function _getDnmTotalSupply() internal view returns (uint256) {\n    return IERC20(DNM).totalSupply();\n  }\n\n  /**\n   * @notice Requires the caller to be the designated core contract address.\n   * @param caller The address attempting the call.\n   */\n  function _checkIsCoreContract(address caller) internal view {\n    require(caller == coreContract, \"Not authorized: not core\");\n  }\n\n  /**\n   * @notice Requires the caller to be an authorized admin address.\n   * @param caller The address attempting the call.\n   */\n  function _checkIsAdmin(address caller) internal view {\n    require(isAdmin[caller] == true, \"Not authorized: not admin\");\n  }\n\n  /**\n   * @notice Withdraws all current balances of reserve assets (DAI, PAXG, WBTC) to a specified caller.\n   * @dev This is typically an administrative or emergency function.\n   * @param caller The address to transfer all balances to.\n   */\n  function _withdrawAll(address caller) internal {\n    uint256 daiBalance = IERC20(DAI).balanceOf(address(this));\n    if (daiBalance > 0) {\n      _handleTranfer(caller, daiBalance, DAI);\n    }\n\n    uint256 paxgBalance = IERC20(PAXG).balanceOf(address(this));\n    if (paxgBalance > 0) {\n      _handleTranfer(caller, paxgBalance, PAXG);\n    }\n\n    uint256 wbtcBalance = IERC20(WBTC).balanceOf(address(this));\n    if (wbtcBalance > 0) {\n      _handleTranfer(caller, wbtcBalance, WBTC);\n    }\n  }\n\n  /**\n   * @notice Converts the deposited DAI into the target reserve tokens (PAXG and WBTC) based on allocation settings.\n   * @param amount The total amount of DAI deposited to be swapped.\n   */\n  function _handleDepositedDai(uint256 amount) internal {\n    uint256 paxgAmount = (amount * ALLOCATION_PAXG) / 100;\n    uint256 wbtcAmount = (amount * ALLOCATION_WBTC) / 100;\n    address to = address(this);\n\n    // Swaps are now protected against zero amount in SwapHelper.\n    _swapFromDAI(PAXG, paxgAmount, to);\n    _swapFromDAI(WBTC, wbtcAmount, to);\n  }\n\n  function _getDnmPrice() internal view returns (uint256 dnmPrice) {\n    uint256 totalReserveValue = _getTotalReserveBalanceInDai();\n    uint256 dnmTotalSupply = _getDnmTotalSupply();\n\n    if (dnmTotalSupply == 0) {\n      // First deposit case: Price is 1 DAI (1e18)\n      return 1;\n    }\n\n    // Price = Total Value / Total Supply of Shares\n    // Denominated in DAI (1e18)\n    dnmPrice = (totalReserveValue) / dnmTotalSupply;\n  }\n\n  /**\n   * @dev Destroys a `value` amount of dnm tokens from `account`, deducting from\n   * the caller's allowance.\n   */\n  function _handleBurnDnm(address account, uint256 value) internal {\n    ERC20Burnable(DNM).burnFrom(account, value);\n  }\n\n  /**\n   * @notice Handles the redemption (withdrawal) of reserve assets by burning DNM shares.\n   * This uses a proportional liquidation method:\n   * 1. Calculates the user's share of all reserve assets.\n   * 2. Swaps the PAXG and WBTC shares for DAI (into the vault).\n   * 3. Calculates the total resulting DAI payout.\n   * 4. Deducts the 3% fee from the total DAI.\n   * 5. Transfers the net DAI to the user and the fee amount to the FEE_RECEIVER.\n   * @param account The address redeeming the shares.\n   * @param amount The amount of DNM tokens to redeem/burn.\n   */\n  function _handleRedeem(address account, uint256 amount) internal {\n    require(amount > 0, \"Redeem amount must be > 0\");\n\n    uint256 totalSup = _getDnmTotalSupply();\n    require(totalSup > 0, \"Cannot redeem from an empty vault\");\n\n    // 1. Calculate full pro-rata amounts of underlying assets\n    uint256 initialDaiBalance = IERC20(DAI).balanceOf(address(this));\n    uint256 paxgBalance = IERC20(PAXG).balanceOf(address(this));\n    uint256 wbtcBalance = IERC20(WBTC).balanceOf(address(this));\n\n    // Calculate full pro-rata amounts: (balance * share_amount) / total_supply\n    uint256 daiProRata = (initialDaiBalance * amount) / totalSup;\n    uint256 paxgProRata = (paxgBalance * amount) / totalSup;\n    uint256 wbtcProRata = (wbtcBalance * amount) / totalSup;\n\n    // Require at least some value to be redeemed\n    require(\n      daiProRata > 0 || paxgProRata > 0 || wbtcProRata > 0,\n      \"Redemption yields zero value\"\n    );\n\n    _handleBurnDnm(account, amount);\n\n    // 2. Swap Pro-Rata PAXG and WBTC shares to DAI, sending resulting DAI to the VAULT (address(this))\n    if (paxgProRata > 0) {\n      _swapToDAI(PAXG, paxgProRata, address(this));\n    }\n\n    if (wbtcProRata > 0) {\n      _swapToDAI(WBTC, wbtcProRata, address(this));\n    }\n\n    // 3. Calculate total DAI acquired for the payout (accounting for the liquidation)\n    uint256 finalDaiBalance = IERC20(DAI).balanceOf(address(this));\n\n    // Calculate the DAI gained only from the proportional liquidation swaps (PAXG/WBTC -> DAI).\n    // Since the swaps target the vault, finalDaiBalance should be >= initialDaiBalance.\n    uint256 daiGainedFromSwaps = finalDaiBalance - initialDaiBalance;\n\n    // totalDaiAcquiredForPayout is the sum of:\n    // a) The user's share of the vault's initial DAI (daiProRata)\n    // b) The DAI received from swapping the user's share of PAXG and WBTC (daiGainedFromSwaps)\n    uint256 totalDaiAcquiredForPayout = daiProRata + daiGainedFromSwaps;\n\n    // 4. Calculate Fee (3%) and Net Payout (97%)\n    uint256 feeAmount = (totalDaiAcquiredForPayout * REDEEM_FEE_BPS) /\n      BPS_DENOMINATOR;\n    uint256 netDaiToPay = totalDaiAcquiredForPayout - feeAmount;\n\n    // 5. Transfer the net calculated DAI to the user and the fee to the receiver\n    if (netDaiToPay > 0) {\n      _handleTranfer(account, netDaiToPay, DAI);\n    }\n    if (feeAmount > 0) {\n      _handleTranfer(FEE_RECEIVER, feeAmount, DAI);\n    }\n  }\n\n  /**\n   * @notice Triggers a rebalancing swap to sell reserve assets (PAXG, WBTC) for DAI\n   * when the vault's DAI balance is insufficient for a withdrawal.\n   * It splits the DAI needed 50/50 between PAXG and WBTC sales, relying on SwapHelper for execution.\n   * @param amountToWithdraw The total DAI amount required.\n   */\n  function _handleInsufficientDai(uint256 amountToWithdraw) internal {\n    uint256 balance = IERC20(DAI).balanceOf(address(this));\n    if (balance >= amountToWithdraw) {\n      return;\n    }\n\n    // Calculate the DAI deficit. Requires amountToWithdraw > balance\n    uint256 insufficientAmount = amountToWithdraw - balance;\n\n    // Split the DAI needed 50/50\n    uint256 daiNeededFromEach = insufficientAmount / 2;\n    address to = address(this);\n\n    // --- 1. Swap PAXG for 50% of the needed DAI using SwapHelper ---\n    uint256 paxgBalance = IERC20(PAXG).balanceOf(address(this));\n\n    // Use the helper to get the exact amount of DAI\n    _swapForExactDAI(\n      PAXG,\n      daiNeededFromEach,\n      paxgBalance, // Max PAXG input (to prevent overspending, use the full balance as max)\n      to\n    );\n\n    // --- 2. Swap WBTC for the remaining needed DAI using SwapHelper ---\n    // Handle odd amount splits: if insufficientAmount is odd, the remaining 1 wei is taken from WBTC.\n    uint256 remainingDaiNeeded = insufficientAmount - daiNeededFromEach;\n    uint256 wbtcBalance = IERC20(WBTC).balanceOf(address(this));\n\n    // Use the helper to get the exact remaining amount of DAI\n    _swapForExactDAI(\n      WBTC,\n      remainingDaiNeeded,\n      wbtcBalance, // Max WBTC input (to prevent overspending, use the full balance as max)\n      to\n    );\n  }\n}\n"
      },
      "project/contracts/vault/VaultCore/VaultStorage.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport {IUniswapV2Router02} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport {IPriceFeed} from \"../interfaces/IPriceFeed.sol\";\n\n/**\n * @title VaultStorage\n * @notice Abstract contract defining all immutable token addresses, allocations,\n * administrative variables, and external interfaces for the vault.\n */\nabstract contract VaultStorage {\n  // Token Addresses (immutable for gas efficiency and security)\n  address public immutable DAI;\n  address public immutable PAXG;\n  address public immutable WBTC;\n  address public immutable DNM;\n\n  // Asset Allocation Percentages (out of 100)\n  uint256 public immutable ALLOCATION_PAXG = 30;\n  uint256 public immutable ALLOCATION_WBTC = 30;\n  uint256 public immutable ALLOCATION_DAI = 40;\n\n  /// @dev Duration for the emergency withdrawal grace period.\n  uint256 public immutable WITHDRAWAL_DELAY = 120 days;\n\n  uint256 public immutable REDEEM_FEE_BPS = 300;\n  uint256 public immutable BPS_DENOMINATOR = 10000;\n  address public immutable FEE_RECEIVER;\n\n  // --- ADDED SWAP CONFIGURATION VARIABLES BACK FOR INHERITANCE ---\n  /// @dev The maximum accepted slippage for swaps E.g., 100 = 1%.\n  uint256 internal _slippageBps = 100;\n  /// @dev The denominator used for slippage calculation (10000 for BPS).\n  uint256 internal _slippageDenominator = 10000;\n  /// @dev The duration (in seconds) added to block.timestamp to set the swap transaction deadline.\n  uint256 internal _deadlineDuration = 10 minutes;\n\n  // External Interfaces\n  IUniswapV2Router02 internal _uniswapRouter;\n  IPriceFeed internal _priceFeed;\n\n  // Withdrawal admins and core contract\n  address public coreContract;\n  mapping(address => bool) public isAdmin;\n\n  /// @notice The timestamp after which the emergencyWithdrawal function can be called.\n  uint256 public withdrawalEnabledTimestamp;\n\n  /**\n   * @notice Initializes all immutable token addresses, the price feed, sets the admin grace period,\n   * and designates up to three initial administrators.\n   * @param _admin1 The address of the first initial administrator.\n   * @param _admin2 The address of the second initial administrator.\n   * @param _admin3 The address of the third initial administrator.\n   */\n  constructor(\n    address _dai,\n    address _paxg,\n    address _wbtc,\n    address _dnm,\n    address _feedAddr,\n    address _routerAddr,\n    address _admin1,\n    address _admin2,\n    address _admin3,\n    address _feeReceiver\n  ) {\n    DAI = _dai;\n    PAXG = _paxg;\n    WBTC = _wbtc;\n    DNM = _dnm;\n\n    _priceFeed = IPriceFeed(_feedAddr);\n    _uniswapRouter = IUniswapV2Router02(_routerAddr);\n\n    FEE_RECEIVER = _feeReceiver;\n\n    // Set initial administrators, ignoring the zero address\n    if (_admin1 != address(0)) {\n      isAdmin[_admin1] = true;\n    }\n    if (_admin2 != address(0)) {\n      isAdmin[_admin2] = true;\n    }\n    if (_admin3 != address(0)) {\n      isAdmin[_admin3] = true;\n    }\n\n    // Set the timestamp when emergency withdrawal becomes available\n    withdrawalEnabledTimestamp = block.timestamp + WITHDRAWAL_DELAY;\n  }\n}\n"
      }
    }
  }
}