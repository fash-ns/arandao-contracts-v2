{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-015ad56feb15b326e81c352a0a9049a62f35f6f2",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/core/MLMTree.sol": "project/contracts/core/MLMTree.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": ["ast"],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/core/MLMTree.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title MLMTree - Multi-Level Marketing Binary Tree Contract\n * @notice Implements a secure, gas-conscious MLM tree structure with on-chain order bookkeeping\n * @dev Each node can have up to 4 children (positions 0-3). Path encoding uses bytes32 arrays\n *      where each byte represents a position (0x00-0x03). Supports efficient subtree calculations\n *      and commission tracking via lastCalculatedOrder mechanism.\n * \n * Path Encoding:\n * - Each bytes32 contains up to 32 path levels\n * - Each byte holds values 0x00, 0x01, 0x02, 0x03 representing positions 0-3\n * - When path exceeds 32 levels, new bytes32 is appended to array\n * \n * isSubTree Semantics:\n * - Returns (true, position) if candidate is in subtree via direct child at position\n * - Returns (true, 255) when candidate == root (sentinel value for same node)\n * - Returns (false, 0) if not in subtree\n */\ncontract MLMTree is ReentrancyGuard, Ownable {\n    /// @dev Maximum orders to process in single calculateOrders call to prevent OOG\n    uint256 public constant MAX_PROCESS_LIMIT = 2000;\n    \n    /// @dev Sentinel value returned by isSubTree when candidate equals root\n    uint8 public constant SAME_NODE_SENTINEL = 255;\n\n    /// @notice User data structure containing tree position and commission tracking\n    struct User {\n        uint32 parentId;                    // Parent user ID (0 for root)\n        uint8 position;                     // Position under parent (0-3)\n        bytes32[] path;                     // Encoded path from root to user\n        uint256 lastCalculatedOrder;       // Last processed order ID for this user\n        uint256[4] childrenBv;             // Accumulated BV for each direct child position\n        uint256 createdAt;                 // Block timestamp of registration\n        bool active;                       // Whether user is active\n    }\n\n    /// @notice Order data structure for tracking purchases\n    struct Order {\n        uint32 buyerId;                     // User ID who made the purchase\n        uint256 amount;                     // Purchase amount/BV\n        uint256 timestamp;                  // Block timestamp of order\n    }\n\n    // Storage mappings\n    /// @notice Maps EOA addresses to compact numeric user IDs\n    mapping(address => uint32) public addressToId;\n    \n    /// @notice Maps user IDs to User structs\n    mapping(uint32 => User) public users;\n    \n    /// @notice Tracks taken positions under each parent to prevent conflicts\n    mapping(uint32 => mapping(uint8 => bool)) public positionTaken;\n    \n    /// @notice Maps order IDs to Order structs\n    mapping(uint256 => Order) public orders;\n    \n    /// @notice Current highest order ID\n    uint256 public lastOrderId;\n    \n    /// @notice Current highest user ID for incremental assignment\n    uint32 public nextUserId = 1;\n\n    // Events\n    /// @notice Emitted when a new user is registered\n    /// @param userId The assigned user ID\n    /// @param parentId The parent user ID\n    /// @param position The position under parent (0-3)\n    /// @param userAddr The user's EOA address\n    event UserRegistered(uint32 indexed userId, uint32 indexed parentId, uint8 position, address indexed userAddr);\n    \n    /// @notice Emitted when a new order is created\n    /// @param orderId The assigned order ID\n    /// @param buyerId The user ID who made the purchase\n    /// @param amount The purchase amount\n    event OrderCreated(uint256 indexed orderId, uint32 indexed buyerId, uint256 amount);\n    \n    /// @notice Emitted when orders are processed for commission calculation\n    /// @param userId The user ID for whom orders were calculated\n    /// @param processed Number of orders processed in this call\n    /// @param lastCalculatedOrder New value of lastCalculatedOrder for this user\n    event OrdersCalculated(uint32 indexed userId, uint256 processed, uint256 lastCalculatedOrder);\n\n    // Custom errors\n    error InvalidParentId();\n    error InvalidPosition();\n    error PositionAlreadyTaken();\n    error UserAlreadyRegistered();\n    error UserNotRegistered();\n    error UnauthorizedCaller();\n    error MaxProcessLimitExceeded();\n    error FirstUserMustBeRoot();\n\n    /// @notice Modifier to ensure caller is registered user\n    /// @param userId The user ID to validate\n    modifier onlyRegistered(uint32 userId) {\n        if (addressToId[msg.sender] != userId || userId == 0) {\n            revert UnauthorizedCaller();\n        }\n        _;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    /**\n     * @notice Registers a new user in the MLM tree\n     * @dev First user must have parentId=0 and position=0. All others need valid parent.\n     *      Path is computed by copying parent's path and appending new position.\n     * @param userAddr The EOA address to register\n     * @param parentId The parent user ID (0 for root user only)\n     * @param position The position under parent (0-3)\n     */\n    function registerUser(address userAddr, uint32 parentId, uint8 position) external {\n        if (addressToId[userAddr] != 0) {\n            revert UserAlreadyRegistered();\n        }\n        \n        if (position > 3) {\n            revert InvalidPosition();\n        }\n\n        // Handle first user (root) registration\n        if (nextUserId == 1) {\n            if (parentId != 0 || position != 0) {\n                revert FirstUserMustBeRoot();\n            }\n        } else {\n            // Validate parent exists and position is available\n            if (parentId == 0 || !users[parentId].active) {\n                revert InvalidParentId();\n            }\n            \n            if (positionTaken[parentId][position]) {\n                revert PositionAlreadyTaken();\n            }\n        }\n\n        // Assign new user ID and create user\n        uint32 newUserId = nextUserId++;\n        addressToId[userAddr] = newUserId;\n        \n        User storage newUser = users[newUserId];\n        newUser.parentId = parentId;\n        newUser.position = position;\n        newUser.lastCalculatedOrder = lastOrderId; // Start from current order\n        newUser.createdAt = block.timestamp;\n        newUser.active = true;\n\n        // Set path based on parent\n        if (parentId == 0) {\n            // Root user has empty path\n            // newUser.path remains empty array\n        } else {\n            // Copy parent's path and append new position\n            User storage parent = users[parentId];\n            for (uint256 i = 0; i < parent.path.length; i++) {\n                newUser.path.push(parent.path[i]);\n            }\n            _appendToPath(newUser.path, position);\n        }\n\n        // Mark position as taken\n        if (parentId != 0) {\n            positionTaken[parentId][position] = true;\n        }\n\n        emit UserRegistered(newUserId, parentId, position, userAddr);\n    }\n\n    /**\n     * @notice Creates a new order for commission calculation\n     * @dev Only the buyer's linked address can create orders for their user ID\n     * @param buyerId The user ID making the purchase\n     * @param amount The purchase amount/BV\n     */\n    function createOrder(uint32 buyerId, uint256 amount) external onlyRegistered(buyerId) {\n        uint256 newOrderId = ++lastOrderId;\n        \n        orders[newOrderId] = Order({\n            buyerId: buyerId,\n            amount: amount,\n            timestamp: block.timestamp\n        });\n\n        emit OrderCreated(newOrderId, buyerId, amount);\n    }\n\n    /**\n     * @notice Processes orders for commission calculation with gas limit protection\n     * @dev Iterates through orders starting from lastCalculatedOrder + 1, updating\n     *      childrenBv for direct children whose subtrees contain the buyers\n     * @param callerId The user ID to calculate commissions for\n     * @param maxProcess Maximum orders to process (capped at MAX_PROCESS_LIMIT)\n     * @return processed Number of orders processed\n     * @return newLastCalculatedOrder Updated lastCalculatedOrder value\n     */\n    function calculateOrders(uint32 callerId, uint256 maxProcess) \n        external \n        nonReentrant \n        returns (uint256 processed, uint256 newLastCalculatedOrder) \n    {\n        if (maxProcess > MAX_PROCESS_LIMIT) {\n            revert MaxProcessLimitExceeded();\n        }\n        \n        if (!users[callerId].active) {\n            revert UserNotRegistered();\n        }\n\n        uint256 cur = users[callerId].lastCalculatedOrder + 1;\n        uint256 end = lastOrderId;\n        processed = 0;\n\n        // Local storage for batch updating childrenBv\n        uint256[4] memory bvUpdates;\n\n        while (cur <= end && processed < maxProcess) {\n            Order memory order = orders[cur];\n            \n            (bool inSubTree, uint8 childPosition) = isSubTree(callerId, order.buyerId);\n            \n            if (inSubTree && childPosition != SAME_NODE_SENTINEL) {\n                // Accumulate BV update for the direct child position\n                bvUpdates[childPosition] += order.amount;\n            }\n            \n            cur++;\n            processed++;\n        }\n\n        // Batch update storage with accumulated values\n        for (uint8 i = 0; i < 4; i++) {\n            if (bvUpdates[i] > 0) {\n                users[callerId].childrenBv[i] += bvUpdates[i];\n            }\n        }\n\n        newLastCalculatedOrder = cur - 1;\n        users[callerId].lastCalculatedOrder = newLastCalculatedOrder;\n\n        emit OrdersCalculated(callerId, processed, newLastCalculatedOrder);\n    }\n\n    /**\n     * @notice Checks if candidateId is in the subtree of rootId\n     * @dev Returns position of direct child through which candidate is reachable.\n     *      Uses efficient prefix matching on encoded paths.\n     * @param rootId The root user ID to check against\n     * @param candidateId The candidate user ID to test\n     * @return inSubTree True if candidate is in root's subtree\n     * @return position Direct child position (0-3) or SAME_NODE_SENTINEL if candidate == root\n     */\n    function isSubTree(uint32 rootId, uint32 candidateId) \n        public \n        view \n        returns (bool inSubTree, uint8 position) \n    {\n        if (!users[rootId].active || !users[candidateId].active) {\n            return (false, 0);\n        }\n\n        if (rootId == candidateId) {\n            return (true, SAME_NODE_SENTINEL);\n        }\n\n        User storage root = users[rootId];\n        User storage candidate = users[candidateId];\n        \n        uint256 rootPathLength = _getPathLength(root.path);\n        uint256 candidatePathLength = _getPathLength(candidate.path);\n\n        // Candidate must be deeper than root to be in subtree\n        if (candidatePathLength <= rootPathLength) {\n            return (false, 0);\n        }\n\n        // Check if root's path is a prefix of candidate's path\n        for (uint256 i = 0; i < rootPathLength; i++) {\n            if (_getPathByte(root.path, i) != _getPathByte(candidate.path, i)) {\n                return (false, 0);\n            }\n        }\n\n        // If prefix matches, return the direct child position\n        uint8 directChildPos = _getPathByte(candidate.path, rootPathLength);\n        return (true, directChildPos);\n    }\n\n    /**\n     * @notice Internal function to append a position to a path array\n     * @dev Writes into the first free byte of the last bytes32, or appends new bytes32 if full\n     * @param path Storage reference to the path array\n     * @param pos Position to append (0-3)\n     */\n    function _appendToPath(bytes32[] storage path, uint8 pos) internal {\n        require(pos <= 3, \"Invalid position\");\n        \n        // If path is empty or last bytes32 is full, add new bytes32\n        if (path.length == 0 || _getPathLength(path) % 32 == 0) {\n            path.push(bytes32(uint256(pos)));\n        } else {\n            // Find the last bytes32 and append to it\n            uint256 lastIndex = path.length - 1;\n            uint256 positionInBytes32 = _getPathLength(path) % 32;\n            \n            // Shift position to correct byte position and OR with existing data\n            bytes32 currentValue = path[lastIndex];\n            bytes32 newByte = bytes32(uint256(pos)) << (8 * (31 - positionInBytes32));\n            path[lastIndex] = currentValue | newByte;\n        }\n    }\n\n    /**\n     * @notice Gets the total number of levels in a path\n     * @dev Counts non-zero bytes across all bytes32 elements in the path\n     * @param path The path array to measure\n     * @return length Total number of path levels\n     */\n    function _getPathLength(bytes32[] storage path) internal view returns (uint256 length) {\n        if (path.length == 0) return 0;\n        \n        // Count full bytes32 elements (each contains 32 levels)\n        length = (path.length - 1) * 32;\n        \n        // Count bytes in the last bytes32\n        bytes32 lastElement = path[path.length - 1];\n        for (uint256 i = 0; i < 32; i++) {\n            if (uint8(lastElement[i]) != 0) {\n                length++;\n            } else {\n                break;\n            }\n        }\n    }\n\n    /**\n     * @notice Retrieves a specific byte from the path at given level index\n     * @dev Efficiently locates the correct bytes32 and byte position within it\n     * @param path The path array to read from\n     * @param levelIndex The level index to retrieve (0-based)\n     * @return The position value (0-3) at the specified level\n     */\n    function _getPathByte(bytes32[] storage path, uint256 levelIndex) \n        internal \n        view \n        returns (uint8) \n    {\n        uint256 bytes32Index = levelIndex / 32;\n        uint256 byteIndex = levelIndex % 32;\n        \n        if (bytes32Index >= path.length) {\n            return 0;\n        }\n        \n        return uint8(path[bytes32Index][byteIndex]);\n    }\n\n    /**\n     * @notice Gets user information by address\n     * @param userAddr The user's EOA address\n     * @return User struct data\n     */\n    function getUserByAddress(address userAddr) external view returns (User memory) {\n        uint32 userId = addressToId[userAddr];\n        require(userId != 0, \"User not found\");\n        return users[userId];\n    }\n\n    /**\n     * @notice Gets the current path length for a user\n     * @param userId The user ID to query\n     * @return Path length (number of levels from root)\n     */\n    function getUserPathLength(uint32 userId) external view returns (uint256) {\n        require(users[userId].active, \"User not found\");\n        return _getPathLength(users[userId].path);\n    }\n\n    /**\n     * @notice Gets remaining orders to be processed for a user\n     * @param userId The user ID to query\n     * @return Number of orders remaining to be processed\n     */\n    function getRemainingOrders(uint32 userId) external view returns (uint256) {\n        require(users[userId].active, \"User not found\");\n        uint256 lastCalculated = users[userId].lastCalculatedOrder;\n        if (lastOrderId > lastCalculated) {\n            return lastOrderId - lastCalculated;\n        }\n        return 0;\n    }\n}\n"
      }
    }
  }
}
